package edu.spring.ex05.controller;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

@Controller  //(그럼이제 스프링이 관리하게됨. servlet-context가서 component-scan 확인해보면 알겠져~//->beans graph 가면 확인 가능!)
public class FileUploadController {
	
	private static final Logger logger = LoggerFactory.getLogger(FileUploadController.class);
	
	//servlet-context.xml 파일에 설정된 문자열 리소스를 주입(Inject)
	//@Inject
	//@Autowired
	@Resource(name="uploadPath") //얘는 name을 지정
	//세 annotaion중 어떤 걸 써도 좋
	private String uploadPath;
	
	@RequestMapping(value="/upload" , method=RequestMethod.GET)
	public void uploadGet(){
		logger.info("uploadGet() 호출");
	}
	
	@RequestMapping(value="/upload" , method=RequestMethod.POST)
	public void uploadPost(MultipartFile file, Model model){
		logger.info("uploadPost() 호출");
		logger.info("파일 이름: "+file.getOriginalFilename());
		logger.info("파일 크기: "+file.getSize());
		
		String savedFile=saveUploadFile(file);
		model.addAttribute("savedFile", savedFile);
	}
	
	@RequestMapping(value="/upload" , method=RequestMethod.POST)
	public void uploadPost2(MultipartFile[] files, Model model){
		logger.info("uploadPost2() 호출: 파일 개수="+files.length);
		
		String result="";
		for(MultipartFile f:files){
			result += saveUploadFile(f)+" ";
		}
		model.addAttribute("savedFile", result);
	}
	
	private String saveUploadFile(MultipartFile source){//얘가 넣을 파일(source)
		//파일의 이름이 중복되지 않도록
		UUID uuid =UUID.randomUUID(); //dash빼고 랜덤하게 36자리 생성 ex)2093f345-519f-416c-aeee-f6d32b52053d
		String savedName = uuid+" "+source.getOriginalFilename();
		File target=new File(uploadPath, savedName); //uploadPath라는 폴더 밑에 savedName이라는 파일(얘가 파일넣을곳(target)
		//근데 이건 단지 메모리에 파일 객ㅊㅔ 생성한거임
		//우린 하드에 넣어야지 이제
		try {
			FileCopyUtils.copy(source.getBytes(), target);  //getByte: 바이트단위로 읽어온 바이트 배열을 리턴
			logger.info("파일 저장 성공: "+savedName);
			
			return savedName;
		} catch (IOException e) {
			logger.info("파일 저장 실패 ");
			
			return null;
		}
	}

}
